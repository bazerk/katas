# -*- encoding: utf-8 -*-

"""
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
"""

import itertools


max_pentagonal_calculated = 0
pentagonals = set()
pentagonal_list = []


def is_pentagonal(tst):
    global max_pentagonal_calculated, max_pentagonal_n
    while max_pentagonal_calculated < tst:
        get_pentagonal(len(pentagonal_list) + 1)
    return tst in pentagonals


def get_pentagonal(n):
    global max_pentagonal_calculated, max_pentagonal_n
    while n > len(pentagonal_list):
        gen_n = len(pentagonal_list) + 1
        max_pentagonal_calculated = (gen_n * (3 * gen_n - 1)) / 2
        pentagonals.add(max_pentagonal_calculated)
        pentagonal_list.append(max_pentagonal_calculated)
    return pentagonal_list[n - 1]


def problem44():
    best_diff = None
    best_n = None
    for n in itertools.count(2):
        pent_n = get_pentagonal(n)
        for m in xrange(1, n - 1):
            pent_m = get_pentagonal(m)
            diff = pent_n - pent_m
            if best_diff is not None and diff > best_diff:
                continue
            if is_pentagonal(pent_n + pent_m) and is_pentagonal(diff):
                if best_diff is None or diff < best_diff:
                    best_n = n
                    best_diff = diff
        if best_diff is not None and (n - 1) > best_n:
            return best_diff
    raise ValueError


if __name__ == '__main__':
    print problem44()
